import { RequestStatus } from '../../../utils/types';
import { mockOrderList } from './mock';
import { CustomersOrdersState, ordersSlice } from './ordersSlice';
import { fetchmyOrderList } from '../../thunks/fetchmyOrderList';

describe(' üü¢ —Ç–µ—Å—Ç—ã —Å–ª–∞–π—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤', () => {
  const initialStateForCustomersOrders: CustomersOrdersState = {
    orders: [],
    status: RequestStatus.Idle,
    error: null
  };

  test('—Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const currentState = ordersSlice.reducer(
      { ...initialStateForCustomersOrders },
      fetchmyOrderList.fulfilled(mockOrderList.orders, '')
    );
    expect(currentState).toEqual({
      ...initialStateForCustomersOrders,
      orders: mockOrderList.orders,
      status: 'Success'
    });
  });

  test('—Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const error = new Error();
    const currentState = ordersSlice.reducer(
      { ...initialStateForCustomersOrders },
      fetchmyOrderList.rejected(error, '')
    );
    expect(currentState).toEqual({
      ...initialStateForCustomersOrders,
      status: RequestStatus.Failed,
      error: '–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  });
});
