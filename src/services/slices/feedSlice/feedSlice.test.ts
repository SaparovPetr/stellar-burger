import { RequestStatus } from '../../../utils/types';
import { FeedState, feedSlice, initialStateForOrders } from './feedSlice';
import { fetchFeed } from '../../thunks/fetchFeed';
import { mockFeed } from './mock';

describe('üü¢ —Ç–µ—Å—Ç—ã —Å–ª–∞–π—Å–∞ –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤', () => {
  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('—Ç–µ—Å—Ç –ª–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', async () => {
    const currentState = feedSlice.reducer(
      { ...initialStateForOrders },
      fetchFeed.pending('')
    );

    expect(currentState).toEqual({
      ...initialStateForOrders,
      status: RequestStatus.Loading
    });
  });

  test('—Ç–µ—Å—Ç –ª–µ–Ω—Ç—ã –ø—Ä–∏ —É—Å–ø–µ—Ö–µ', async () => {
    const currentState = feedSlice.reducer(
      {
        ...initialStateForOrders
      },
      fetchFeed.fulfilled(mockFeed, '')
    );

    expect(currentState).toEqual({
      ...initialStateForOrders,
      orders: mockFeed.orders,
      total: mockFeed.total,
      totalTooday: mockFeed.totalToday,
      status: RequestStatus.Success
    });
  });

  test('—Ç–µ—Å—Ç –ª–µ–Ω—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ', async () => {
    const error = new Error();

    const currentState = feedSlice.reducer(
      {
        ...initialStateForOrders
      },
      fetchFeed.rejected(error, '')
    );

    expect(currentState).toEqual({
      ...initialStateForOrders,
      status: RequestStatus.Failed,
      error: '–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã'
    });
  });
});
